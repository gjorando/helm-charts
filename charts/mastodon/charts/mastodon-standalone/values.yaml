# See full documentation: https://github.com/gjorando/helm-charts/blob/main/charts/mastodon/charts/mastodon-standalone/README.md

## @section General parameters
##

## @param image Image parameters for the pods
image:
  repository: "ghcr.io/mastodon/mastodon"
  # Replace with Always if using the latest tag
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion
  tag: ""

## @param imagePullSecrets Secrets for pulling the image from a private registry
imagePullSecrets: []
## @param nameOverride Overrides the name of the chart
nameOverride: ""
## @param fullnameOverride Overrides the fully qualified app name
fullnameOverride: ""

## @param serviceAccount Configuration for the service account
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## @param podAnnotations Annotations to add to deployed pods
podAnnotations: {}
## @param podLabels Labels to add to deployed pods
podLabels: {}
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}

## @param podSecurityContext Security context to add to deployed pods
podSecurityContext: {}
  # fsGroup: 2000

## @param securityContext Security context for the containers
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true

## @param services Service configuration for Mastodon
services:
  web:
    type: ClusterIP
    port: 80
  streaming:
    type: ClusterIP
    port: 4000

## @param resources Resources to allocate to the containers
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m

# @param nodeSelector Node selector for the deployments
nodeSelector: {}

# @param tolerations Tolerations for the deployments
tolerations: []

# @param affinity Affinities for the deployments
affinity: {}

## @section Mastodon configuration
##

## @param localDomain Domain name (without the protocol) for your instance, used to identify it on the Fediverse (cannot be changed later)
# localDomain: "example.com"

## @param singleUserMode Whether to run the instance as a single user instance
singleUserMode: false

## @param existingSecret Name of the secret to use for storing the Mastodon secrets (if it doesn't exist it will be created)
# existingSecret: "my-secret"

## @param redis Redis parameters
## @param redis.host Redis host
## @param redis.port Redis port
## @param redis.secretKeyRef Optional secret storing the password
redis:
  # host: "my-redis-instance"
  port: 6379
  # secretKeyRef: 
  #   name: "my-redis-secret"
  #   key: "redis-password"

## @param postgres Postgres parameters
## @param postgres.host Postgres host
## @param postgres.port Postgres port
## @param postgres.name Database name
## @param postgres.user Postgres user
## @param postgres.secretKeyRef Optional secret storing the password
postgres:
  # host: "my-postgres-instance"
  port: 5432
  # name: "mastodon_production"
  user: mastodon
  # secretKeyRef: 
  #   name: "my-psql-secret"
  #   key: "postgres-password"

  ## @param smtp SMTP parameters
  ## @param smtp.enabled Whether to configure e-mail sending
  ## @param smtp.host SMTP server
  ## @param smtp.port SMTP port
  ## @param smtp.fromAddress Value to use for the from field
  ## @param smtp.secretKeyRef Secret storing the password
smtp:
  enabled: true
  # host: "smtp.example.com"
  port: 587
  # fromAddress: "notification@example.com"
  # user: "alice"
  # secretKeyRef:
  #   name: "my-smtp-secret"
  #   key: "mailgun-password"

## @section Storage parameters
##

## @param persistence Options related to data persistence
## @param persistence.enabled Whether to enable persistence of the app data
## @param persistence.existingClaims Use existing PVC instead of creating them (each key corresponds to a volume)
## @param persistence.accessMode Access mode for the persistent volumes
## @param persistence.storageClassName Storage class name to use instead of the cluster default
## @param persistence.resources Resources requirements for each claim (each key corresponds to a volume)
persistence: 
  enabled: true
  existingClaims: {}
    # assets: my-assets-claim
    # system: my-system-claim
  accessMode: ReadWriteOnce
  # storageClassName: my-storage-class
  resources:
    assets:
      requests:
        storage: 10Gi
    system:
      requests:
        storage: 100Gi

# @param volumes Additional volumes on the deployed pods
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# @param volumeMounts Additional volumeMounts on the containers
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

